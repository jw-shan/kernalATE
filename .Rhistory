source('D:/OneDrive - ruc.edu.cn/RUC/Research/Treatment/kernal estimation of ATE/paper/CodeATE/Simu.R', echo=TRUE)
source('D:/OneDrive - ruc.edu.cn/RUC/Research/Treatment/kernal estimation of ATE/paper/CodeATE/Simu.R', echo=TRUE)
source('D:/OneDrive - ruc.edu.cn/RUC/Research/Treatment/kernal estimation of ATE/paper/CodeATE/Simu.R', echo=TRUE)
source('E:/OneDrive - ruc.edu.cn/RUC/Research/Treatment/kernal estimation of ATE/paper/CodeATE/Simu.R', echo=TRUE)
source("functionals.R")
source("TrueValue.R")
source("Data_gen.R")
data <- DataGen(500,10)
View(data)
rnorm(20,0.87,0.1)
library(randomForest)
install.packages("randomForest")
source("functionals.R")
source("TrueValue.R")
source("Data_gen.R")
data <- DataGen(100,300)
data <- DataGen(100,300)
data.df <- data.frame(x<-data$x,y<-data$y,z<-data$z,d<-data$d)
plot(data$x,data$y)
plot(data$x,data$d)
plot(data$d,data$y)
library(ggplot2)
ggplot(data = data.df, aes(x=x,y=y)) + geom_point()
ggplot(data = data.df, aes(x=d,y=y)) + geom_jitter()
source("functionals.R")
x<-data$x;y<-data$y;z<-data$z;d<-data$d
data.df <- data.frame(x<-x,y<-y,z<-z,d<-d)
data <- DataGen(500,300)
x<-data$x;y<-data$y;z<-data$z;d<-data$d
data.df <- data.frame(x<-x,y<-y,z<-z,d<-d)
ggplot(data = data.df, aes(x=d,y=y)) + geom_jitter()
hopt <- 1.06*sqrt(var(x))* 500^{-1/5}
hopt <- 1.06*sqrt(var(x))* N^{-1/5}
N=500
hopt <- 1.06*sqrt(var(x))* N^{-1/5}
fhat(x,z,hopt)
f <- fhat(x,z,hopt)
ggplot(data = mutate(data.df,f<-f), aes(x=x,y=f)) + geom_jitter()
ggplot(data = mutate(data.df,f=f), aes(x=x,y=f)) + geom_jitter()
library(dplyr)
ggplot(data = mutate(data.df,f=f), aes(x=x,y=f)) + geom_jitter()
data = mutate(data.df,f=f) %>% select(z=1)
data
View(data)
data = mutate(data.df,f=f) %>% select(z==1)
data = mutate(data.df,f=f) %>% filter(z==1)
View(data)
data <- DataGen(500,300)
x<-data$x;y<-data$y;z<-data$z;d<-data$d
data.df <- data.frame(x<-x,y<-y,z<-z,d<-d)
mutate(data.df,f=f)
data = mutate(data.df,f=f) %>% filter(z==1)
cbind(data.df,f) %>% filter(z==1)
data <- DataGen(500,300)
x<-data$x;y<-data$y;z<-data$z;d<-data$d
data.df <- data.frame(x<-x,y<-y,z<-z,d<-d)
View(data.df)
data.df <- data.frame(x1<-x,y<-y,z<-z,d<-d)
data.df <- data.frame(x=x,y=y,z=z,d=d)
View(data.df)
mutate(data.df,f=f) %>% filter(z==1) %>%
ggplot(aes(x=x,y=f)) + geom_jitter()
data.df.z1 <- filter(data.df,z==1)
data.df.z0 <- filter(data.df,z==0)
plot(data.df.z1$x)
plot(x,z)
ggplot(data.df, aes(x=x,y=z)) + jitter()
data.df <- data.frame(x=x,y=y,z=z,d=d)
ggplot(data.df, aes(x=x,y=z)) + jitter()
View(data.df)
ggplot(data = data.df, aes(x=x,y=z)) + jitter()
ggplot(data = data.df, aes(x=x,y=z))
ggplot(data = data.df, aes(x=x,y=z)) + geom_jitter()
mutate(data.df,f=f) %>% filter(z==1) %>%
ggplot(aes(x=x,y=f)) + geom_jitter()
mutate(data.df,f=f) %>% filter(z==0) %>%
ggplot(aes(x=x,y=f)) + geom_jitter()
mutate(data.df,f=f) %>% filter(z==1) %>%
ggplot(aes(x=x,y=f)) + geom_jitter()
data.frame(x,y)
yofx <- randomForest(z ~ x, data = data.frame(z,x) )
library(randomForest)
yofx <- randomForest(z ~ x, data = data.frame(z,x) )
zofx <- randomForest(z ~ x, data = data.frame(z,x) )
View(zofx)
predict(zofx, x)
f2 <- predict(zofx, x)
mutate(data.df,f=f2) %>% filter(z==1) %>%
ggplot(aes(x=x,y=f)) + geom_jitter()
library(randomForest)
library(ggplot2)
library(dplyr)
source("Data_gen.R")
N=500
data <- DataGen(500,300)
source("TrueValue.R")
data <- DataGen(500,300)
x<-data$x;y<-data$y;z<-data$z;d<-data$d
data.df <- data.frame(x,y,z,d)
hopt <- 1.06*sqrt(var(x))* N^{-1/5}
ggplot(data = data.df, aes(x=x,y=z)) + geom_jitter()
plot(x,expit(x))
expit <- function(logodds){ 1/(1+exp(-logodds))}
plot(x,expit(x))
plot(x,expit(0.1-0.5*x))
#true
plot(x,expit(0.1-0.5*x))
ggplot(data = data.df, aes(x=x,y=z)) + geom_jitter()
#true
plot(x,expit(0.1-0.5*x))
# kernal estimation
f <- fhat(x,z,hopt)
# kernal estimation
fhat <- function(X,Z,h){
n = length(Z)
res = vector(length = n)
for (i in seq(n)) {
nu <- sum(dnorm((X-X[i])/h)/h * (Z==Z[i]))
de <- sum(dnorm((X-X[i])/h)/h)
res[i] = nu/de
}
return(res)
}
f <- fhat(x,z,hopt)
mutate(data.df,f=f) %>% filter(z==1) %>%
ggplot(aes(x=x,y=f)) + geom_jitter()
zofx <- randomForest(z ~ x, data = data.frame(z,x) )
#true
plot(x,expit(0.1-0.5*x))
# kernal estimation
fhat <- function(X,Z,h){
n = length(Z)
res = vector(length = n)
for (i in seq(n)) {
nu <- sum(dnorm((X-X[i])/h)/h * (Z==Z[i]))
de <- sum(dnorm((X-X[i])/h)/h)
res[i] = nu/de
}
return(res)
}
f <- fhat(x,z,hopt)
mutate(data.df,f=f) %>% filter(z==1) %>%
ggplot(aes(x=x,y=f)) + geom_jitter()
#true
plot(x,expit(0.1-0.5*x))
data <- DataGen(1000,300)
x<-data$x;y<-data$y;z<-data$z;d<-data$d
data.df <- data.frame(x,y,z,d)
hopt <- 1.06*sqrt(var(x))* N^{-1/5}
#true
plot(x,expit(0.1-0.5*x))
# kernal estimation
fhat <- function(X,Z,h){
n = length(Z)
res = vector(length = n)
for (i in seq(n)) {
nu <- sum(dnorm((X-X[i])/h)/h * (Z==Z[i]))
de <- sum(dnorm((X-X[i])/h)/h)
res[i] = nu/de
}
return(res)
}
f <- fhat(x,z,hopt)
mutate(data.df,f=f) %>% filter(z==1) %>%
ggplot(aes(x=x,y=f)) + geom_jitter()
data <- DataGen(1000,100)
x<-data$x;y<-data$y;z<-data$z;d<-data$d
data.df <- data.frame(x,y,z,d)
hopt <- 1.06*sqrt(var(x))* N^{-1/5}
#true
plot(x,expit(0.1-0.5*x))
# kernal estimation
fhat <- function(X,Z,h){
n = length(Z)
res = vector(length = n)
for (i in seq(n)) {
nu <- sum(dnorm((X-X[i])/h)/h * (Z==Z[i]))
de <- sum(dnorm((X-X[i])/h)/h)
res[i] = nu/de
}
return(res)
}
f <- fhat(x,z,hopt)
mutate(data.df,f=f) %>% filter(z==1) %>%
ggplot(aes(x=x,y=f)) + geom_jitter()
data <- DataGen(10000,200)
x<-data$x;y<-data$y;z<-data$z;d<-data$d
data.df <- data.frame(x,y,z,d)
hopt <- 1.06*sqrt(var(x))* N^{-1/5}
#true
plot(x,expit(0.1-0.5*x))
# kernal estimation
fhat <- function(X,Z,h){
n = length(Z)
res = vector(length = n)
for (i in seq(n)) {
nu <- sum(dnorm((X-X[i])/h)/h * (Z==Z[i]))
de <- sum(dnorm((X-X[i])/h)/h)
res[i] = nu/de
}
return(res)
}
f <- fhat(x,z,hopt)
mutate(data.df,f=f) %>% filter(z==1) %>%
ggplot(aes(x=x,y=f)) + geom_jitter()
zofx <- randomForest(z ~ x, data = data.frame(z,x) )
f2 <- predict(zofx, x)
mutate(data.df,f=f) %>% filter(z==1) %>%
ggplot(aes(x=x,y=f)) + geom_jitter()
mutate(data.df,f=f2) %>% filter(z==1) %>%
ggplot(aes(x=x,y=f)) + geom_jitter()
head(f2)
data <- DataGen(20000,200)
x<-data$x;y<-data$y;z<-data$z;d<-data$d
data.df <- data.frame(x,y,z,d)
hopt <- 1.06*sqrt(var(x))* N^{-1/5}
#true
plot(x,expit(0.1-0.5*x))
data <- DataGen(2000,200)
x<-data$x;y<-data$y;z<-data$z;d<-data$d
data.df <- data.frame(x,y,z,d)
hopt <- 1.06*sqrt(var(x))* N^{-1/5}
#true
plot(x,expit(0.1-0.5*x))
# kernal estimation
fhat <- function(X,Z,h){
n = length(Z)
res = vector(length = n)
for (i in seq(n)) {
nu <- sum(dnorm((X-X[i])/h)/h * (Z==Z[i]))
de <- sum(dnorm((X-X[i])/h)/h)
res[i] = nu/de
}
return(res)
}
f <- fhat(x,z,hopt)
mutate(data.df,f=f) %>% filter(z==1) %>%
ggplot(aes(x=x,y=f)) + geom_jitter()
#true
plot(x,expit(0.1-0.5*x))
# kernal estimation
fhat <- function(X,Z,h){
n = length(Z)
res = vector(length = n)
for (i in seq(n)) {
nu <- sum(dnorm((X-X[i])/h)/h * (Z==Z[i]))
de <- sum(dnorm((X-X[i])/h)/h)
res[i] = nu/de
}
return(res)
}
f <- fhat(x,z,hopt)
mutate(data.df,f=f) %>% filter(z==1) %>%
ggplot(aes(x=x,y=f)) + geom_jitter()
rm(list=ls())
library(parallel)
source("functionals.R")
source("TrueValue.R")
source("Data_gen.R")
source("plot.R")
## Monto Carlo times and Sample Size###
seed = 300
## Monto Carlo times and Sample Size###
seed = 300
J <- 500
N <- 1000
truevalue<- 0.087
# parallel setting
cl <- makeCluster(16)
clusterExport(cl,ls())
## Estimation function
estimation <- function(count) {
Data<-DataGen(N,seed+count)
h <- N^{-2/7}
hopt <- 1.06*sqrt(var(Data$x))* N^{-1/5}
X<-Data$x
Z<-Data$z
D<-Data$d
Y<-Data$y
T1est <- T1(X,Y,D,Z,h)
T2est <- T2(X,Y,D,Z,h)
T3est <- T3(X,Y,D,Z,h)
Test  <- Tt(X,Y,D,Z,hopt)
# veff  <- estVeff(X,Y,D,Z,hopt)
# est <- cbind(T1est,T2est,T3est,Test,veff)
est <- cbind(T1est,T2est,T3est,Test)
# est <- cbind(Test,veff)
return(est)
}
est  <- parSapply(cl,1:J,estimation)
est  <- t(est)
result <- matrix(nrow = 4, ncol = 5)
colnames(result)<-c("bias","stdev","MSE","RMSE","CR")
rownames(result)<-c("T1","T2","T3","T")
for (i in 1:4) {
Delta <- mean(est[,i])
bias  <- Delta - truevalue
mse   <- 1/J*(sum((est[,i]-truevalue)^2))
stdev <- sqrt(1/J*(sum((est[,i]-Delta)^2)))
rmse<- sqrt(mse)
count<-0
for(j in 1:J){
if(est[j,i]> 0.087-1.96*stdev & est[j,i]< 0.087+1.96*stdev)
count<- count+1
}
coverage_rate <<- count/J
CR <- coverage_rate
result[i,] <- cbind(bias,stdev,mse,rmse,CR)
}
result
# summary of veff
mean(veff)
detectCores()
library(parallel)
detectCores()
as.vector(matrix(c(1,2,3,4),2,2))
rm(list=ls())
library(parallel)
detectCores()
cl <- makeCluster(16)
estimation <- function(count) {
n=3000
x <- matrix(runif(n*n),n,n)
res = as.vector(solve(x))
return(res)
}
start_time <- Sys.time()
est  <- parSapply(cl,1:20,estimation)
end_time <- Sys.time()
end_time - start_time
estimation <- function(count) {
n=2000
x <- matrix(runif(n*n),n,n)
res = as.vector(solve(x))
return(res)
}
start_time <- Sys.time()
est  <- parSapply(cl,1:20,estimation)
end_time <- Sys.time()
end_time - start_time
cl <- makeCluster(16)
estimation <- function(count) {
n=1000
x <- matrix(runif(n*n),n,n)
res = as.vector(solve(x))
return(res)
}
start_time <- Sys.time()
est  <- parSapply(cl,1:20,estimation)
end_time <- Sys.time()
end_time - start_time
stopCluster(cl)
rm(list=ls())
rm(list=ls())
library(parallel)
detectCores()
cl <- makeCluster(16)
estimation <- function(count) {
n=1000
x <- matrix(runif(n*n),n,n)
res = as.vector(solve(x))
return(res)
}
start_time <- Sys.time()
est  <- parSapply(cl,1:20,estimation)
end_time <- Sys.time()
end_time - start_time
stopCluster(cl)
start_time <- Sys.time()
n=3000
x <- matrix(runif(n*n),n,n)
solve(x)
end_time <- Sys.time()
end_time - start_time
rm(list=ls())
library(parallel)
detectCores()
cl <- makeCluster(8)
estimation <- function(count) {
n=2000
x <- matrix(runif(n*n),n,n)
res = as.vector(solve(x))
return(res)
}
start_time <- Sys.time()
est  <- parSapply(cl,1:20,estimation)
end_time <- Sys.time()
end_time - start_time
stopCluster(cl)
