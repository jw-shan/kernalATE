a <- c(1,2,3,4,5,6)
a[-c(1,3)]
rm(list=ls())
load("3.1 NLS.RData")
source("3.2 KernelEstimators.R")
btstrap.each = 500
h <- 1.06* N^{-1/8}
X = X.mat[,c(2:4, 8,9,12, 14, 19,20,22)]
X = data.frame(X)
X$age        = scale(X$age)
X$fatheduc   = scale(X$fatheduc)
X$motheduc   = scale(X$motheduc)
X$iq         = scale(X$iq)
### romove f(z|x)=0
K_x = K(X,h)
num <- vector()
for (i in 1:N) {
f_Z <- K[,i] * I(Z==1) * I(Z==0)
if (f_Z==0) {
num = c(num,i)
}
X <- X[-i,]
Y <- Y[-i]
Z <- Z[-i]
D <- D[-i]
N <- length(D)
}
for (i in 1:N) {
f_Z <- K_x[,i] * I(Z==1) * I(Z==0)
if (f_Z==0) {
num = c(num,i)
}
X <- X[-i,]
Y <- Y[-i]
Z <- Z[-i]
D <- D[-i]
N <- length(D)
}
warnings()
I(Z==1
)
i=1
f_Z <- K_x[,i] * (Z==1) * (Z==0)
f_Z
num <- vector()
for (i in 1:N) {
f_Z <- K_x[,i] * (Z==1) * (Z==0)
if (sum(f_Z)==0) {
num = c(num,i)
}
X <- X[-i,]
Y <- Y[-i]
Z <- Z[-i]
D <- D[-i]
N <- length(D)
}
warnings()
length(K_x[,i])
length(Z==1)
Z==1
load("3.1 NLS.RData")
source("3.2 KernelEstimators.R")
btstrap.each = 500
h <- 1.06* N^{-1/8}
X = X.mat[,c(2:4, 8,9,12, 14, 19,20,22)]
X = data.frame(X)
X$age        = scale(X$age)
X = X.mat[,c(2:4, 8,9,12, 14, 19,20,22)]
X = data.frame(X)
X$age        = scale(X$age)
X$fatheduc   = scale(X$fatheduc)
X$motheduc   = scale(X$motheduc)
X$iq         = scale(X$iq)
### romove f(z|x)=0
K_x = K(X,h)
num <- vector()
for (i in 1:N) {
f_Z <- K_x[,i] * (Z==1) * (Z==0)
if (sum(f_Z)==0) {
num = c(num,i)
}
X <- X[-i,]
Y <- Y[-i]
Z <- Z[-i]
D <- D[-i]
N <- length(D)
}
load("3.1 NLS.RData")
X = X.mat[,c(2:4, 8,9,12, 14, 19,20,22)]
### romove f(z|x)=0
K_x = K(X,h)
### romove f(z|x)=0
K_x = K(X,h)
num <- vector()
i=1
f_Z <- K_x[,i] * (Z==1) * (Z==0)
View(X)
sum(f_Z)
f_1 <- K_x[,i] * (Z==1)
f_0 <- K_x[,i] * (Z==0)
sum(f_1)==0 | sum(f_0)==0
### romove f(z|x)=0
K_x = K(X,h)
num <- vector()
load("3.1 NLS.RData")
source("3.2 KernelEstimators.R")
btstrap.each = 500
h <- 1.06* N^{-1/8}
X = X.mat[,c(2:4, 8,9,12, 14, 19,20,22)]
X = data.frame(X)
load("3.1 NLS.RData")
source("3.2 KernelEstimators.R")
btstrap.each = 500
h <- 1.06* N^{-1/8}
X = X.mat[,c(2:4, 8,9,12, 14, 19,20,22)]
X = data.frame(X)
X$age        = scale(X$age)
X$fatheduc   = scale(X$fatheduc)
X$motheduc   = scale(X$motheduc)
X$iq         = scale(X$iq)
### romove f(z|x)=0
K_x = K(X,h)
num <- vector()
f_1 <- K_x[,i] * (Z==1)
f_0 <- K_x[,i] * (Z==0)
for (i in 1:N) {
f_1 <- K_x[,i] * (Z==1)
f_0 <- K_x[,i] * (Z==0)
if (sum(f_1)==0 | sum(f_0)==0) {
num = c(num,i)
}
X <- X[-i,]
Y <- Y[-i]
Z <- Z[-i]
D <- D[-i]
N <- length(D)
}
warnings()
load("3.1 NLS.RData")
source("3.2 KernelEstimators.R")
btstrap.each = 500
h <- 1.06* N^{-1/8}
X = X.mat[,c(2:4, 8,9,12, 14, 19,20,22)]
X = data.frame(X)
X$age        = scale(X$age)
X$fatheduc   = scale(X$fatheduc)
X$motheduc   = scale(X$motheduc)
X$iq         = scale(X$iq)
### romove f(z|x)=0
K_x = K(X,h)
num <- vector()
for (i in 1:N) {
f_1 <- K_x[,i] * (Z==1)
f_0 <- K_x[,i] * (Z==0)
if (sum(f_1)==0 | sum(f_0)==0) {
num = c(num,i)
}
}
X <- X[-i,]
Y <- Y[-i]
Z <- Z[-i]
D <- D[-i]
N <- length(D)
load("3.1 NLS.RData")
source("3.2 KernelEstimators.R")
btstrap.each = 500
h <- 1.06* N^{-1/8}
X = X.mat[,c(2:4, 8,9,12, 14, 19,20,22)]
X = data.frame(X)
X$age        = scale(X$age)
X$fatheduc   = scale(X$fatheduc)
X$motheduc   = scale(X$motheduc)
X$iq         = scale(X$iq)
### romove f(z|x)=0
K_x = K(X,h)
num <- vector()
for (i in 1:N) {
f_1 <- K_x[,i] * (Z==1)
f_0 <- K_x[,i] * (Z==0)
if (sum(f_1)==0 | sum(f_0)==0) {
num = c(num,i)
}
}
X <- X[-num,]
Y <- Y[-mum]
Z <- Z[-num]
D <- D[-num]
N <- length(D)
KSE1_est <- KSE_1(X,Y,D,Z,h)
warnings()
rm(list=ls())
load("3.1 NLS.RData")
source("3.2 KernelEstimators.R")
btstrap.each = 500
h <- 1.06* N^{-1/8}
X = X.mat[,c(2:4, 8,9,12, 14, 19,20,22)]
X = data.frame(X)
X$age        = scale(X$age)
X$fatheduc   = scale(X$fatheduc)
X$motheduc   = scale(X$motheduc)
X$iq         = scale(X$iq)
### romove f(z|x)=0
K_x0 = K(X,h)
num <- vector()
for (i in 1:N) {
f_1 <- K_x0[,i] * (Z==1)
f_0 <- K_x0[,i] * (Z==0)
if (sum(f_1)==0 | sum(f_0)==0) {
num = c(num,i)
}
}
X <- X[-num,]
Y <- Y[-mum]
Z <- Z[-num]
Y <- Y[-num]
Z <- Z[-num]
D <- D[-num]
N <- length(D)
rm(list=ls())
load("3.1 NLS.RData")
source("3.2 KernelEstimators.R")
btstrap.each = 500
h <- 1.06* N^{-1/8}
X = X.mat[,c(2:4, 8,9,12, 14, 19,20,22)]
X = data.frame(X)
X$age        = scale(X$age)
X$fatheduc   = scale(X$fatheduc)
X$motheduc   = scale(X$motheduc)
X$iq         = scale(X$iq)
### romove f(z|x)=0
K_x0 = K(X,h)
num <- vector()
for (i in 1:N) {
f_1 <- K_x0[,i] * (Z==1)
f_0 <- K_x0[,i] * (Z==0)
if (sum(f_1)==0 | sum(f_0)==0) {
num = c(num,i)
}
}
X <- X[-num,]
Y <- Y[-num]
Z <- Z[-num]
D <- D[-num]
N <- length(D)
KSE1_est <- KSE_1(X,Y,D,Z,h)
n = length(Z)
res = vector(length = n)
for (i in seq(n)) {
nu <- sum(K_x[,i] * (Z==Z[i]))
de <- sum(K_x[,i])
res[i] = nu/de
}
K_x = K(X,h)
res = vector(length = n)
for (i in seq(n)) {
nu <- sum(K_x[,i] * (Z==Z[i]))
de <- sum(K_x[,i])
res[i] = nu/de
}
which(is.nan(res))
ind=1
res = vector(length = n)
for (i in seq(n)) {
nu <- sum(D * K_x[,i] * (Z==ind))
de <- sum(K_x[,i] * (Z==ind))
res[i] = nu/de
}
which(is.nan(res))
res = vector(length = n)
for (i in seq(n)) {
nu <- sum(Y * K_x[,i] * (Z==ind))
de <- sum(K_x[,i] * (Z==ind))
res[i] = nu/de
}
which(is.nan(res))
ind=0
res = vector(length = n)
for (i in seq(n)) {
nu <- sum(Y * K_x[,i] * (Z==ind))
de <- sum(K_x[,i] * (Z==ind))
res[i] = nu/de
}
ind=0
which(is.nan(res))
res = vector(length = n)
for (i in seq(n)) {
nu <- sum(K_x[,i] * (Z==Z[i]))
de <- sum(K_x[,i])
res[i] = nu/de
}
which(is.nan(res))
res = vector(length = n)
for (i in seq(n)) {
nu <- sum(D * K_x[,i] * (Z==ind))
de <- sum(K_x[,i] * (Z==ind))
res[i] = nu/de
}
which(is.nan(res))
pDhat(1,X,Z,D,h,K_x)-pDhat(0,X,Z,D,h,K_x)
res=pDhat(1,X,Z,D,h,K_x)-pDhat(0,X,Z,D,h,K_x)
which(res==0)
a <- c(1,2,3,4,5,6)
a[-c(2,3,1,2)]
a <- c(1,2,3,4,5,6)
a[-c(2,4,1,2)]
rm(list=ls())
load("3.1 NLS.RData")
source("3.2 KernelEstimators.R")
btstrap.each = 500
h <- 1.06* N^{-1/8}
X = X.mat[,c(2:4, 8,9,12, 14, 19,20,22)]
X = data.frame(X)
X$age        = scale(X$age)
X$fatheduc   = scale(X$fatheduc)
X$motheduc   = scale(X$motheduc)
X$iq         = scale(X$iq)
### romove f(z|x)=0 and delta^D=0
K_x0 = K(X,h)
num <- vector()
for (i in 1:N) {
f_1 <- K_x0[,i] * (Z==1)
f_0 <- K_x0[,i] * (Z==0)
if (sum(f_1)==0 | sum(f_0)==0) {
num = c(num,i)
}
}
ind0 = which(deltaDhat(X,Z,D,h,K_x0)==0)
ind0
num = c(num,ind0)
X <- X[-num,]
Y <- Y[-num]
Z <- Z[-num]
D <- D[-num]
N <- length(D)
KSE1_est <- KSE_1(X,Y,D,Z,h)
KSE1_est
K_x = K(X,h)
sum( (2*Z-1)/fhat(X,Z,h,K_x)*
Y/deltaDhat(X,Z,D,h,K_x) ) /N
fhat(X,Z,h,K_x)
min(fhat(X,Z,h,K_x))
1/min(fhat(X,Z,h,K_x))
min(deltaDhat(X,Z,D,h,K_x))
min(abs(deltaDhat(X,Z,D,h,K_x)))
quantile(abs(deltaDhat(X,Z,D,h,K_x)),seq(0,1,0.05))
rm(list=ls())
load("3.1 NLS.RData")
source("3.2 KernelEstimators.R")
btstrap.each = 500
h <- 1.06* N^{-1/8}
X = X.mat[,c(2:4, 8,9,12, 14, 19,20,22)]
X = data.frame(X)
X$age        = scale(X$age)
X$fatheduc   = scale(X$fatheduc)
X$motheduc   = scale(X$motheduc)
X$iq         = scale(X$iq)
### romove f(z|x)=0 and delta^D=0
K_x0 = K(X,h)
num <- vector()
for (i in 1:N) {
f_1 <- K_x0[,i] * (Z==1)
f_0 <- K_x0[,i] * (Z==0)
if (sum(f_1)==0 | sum(f_0)==0) {
num = c(num,i)
}
}
ind0 = which(deltaDhat(X,Z,D,h,K_x0)<e-4)
num = c(num,ind0)
X <- X[-num,]
Y <- Y[-num]
Z <- Z[-num]
D <- D[-num]
N <- length(D)
K_x = K(X,h)
sum( (2*Z-1)/fhat(X,Z,h,K_x)*
Y/deltaDhat(X,Z,D,h,K_x) ) /N
10^(-4)
1e-04
1e-4
rm(list=ls())
load("3.1 NLS.RData")
source("3.2 KernelEstimators.R")
btstrap.each = 500
h <- 1.06* N^{-1/8}
X = X.mat[,c(2:4, 8,9,12, 14, 19,20,22)]
X = data.frame(X)
X$age        = scale(X$age)
X$fatheduc   = scale(X$fatheduc)
X$motheduc   = scale(X$motheduc)
X$iq         = scale(X$iq)
### romove f(z|x)=0 and delta^D=0
K_x0 = K(X,h)
num <- vector()
for (i in 1:N) {
f_1 <- K_x0[,i] * (Z==1)
f_0 <- K_x0[,i] * (Z==0)
if (sum(f_1)==0 | sum(f_0)==0) {
num = c(num,i)
}
}
ind0 = which(deltaDhat(X,Z,D,h,K_x0)<1e-4)
ind0 = which(deltaDhat(X,Z,D,h,K_x0)<1e-5)
ind0 = which(deltaDhat(X,Z,D,h,K_x0)<1e-6)
ind0 = which(deltaDhat(X,Z,D,h,K_x0)<1e-10)
quantile(deltaDhat(X,Z,D,h,K_x0),seq(0,1,0.05))
which(is.na(deltaDhat(X,Z,D,h,K_x0)))
rm(list=ls())
load("3.1 NLS.RData")
source("3.2 KernelEstimators.R")
btstrap.each = 500
h <- 1.06* N^{-1/8}
X = X.mat[,c(2:4, 8,9,12, 14, 19,20,22)]
X = data.frame(X)
X$age        = scale(X$age)
X$fatheduc   = scale(X$fatheduc)
X$motheduc   = scale(X$motheduc)
X$iq         = scale(X$iq)
### romove f(z|x)=0 and delta^D=0
K_x0 = K(X,h)
num <- vector()
rm(list=ls())
load("3.1 NLS.RData")
source("3.2 KernelEstimators.R")
btstrap.each = 500
h <- 1.06* N^{-1/8}
X = X.mat[,c(2:4, 8,9,12, 14, 19,20,22)]
X = data.frame(X)
X$age        = scale(X$age)
X$fatheduc   = scale(X$fatheduc)
X$motheduc   = scale(X$motheduc)
X$iq         = scale(X$iq)
### romove f(z|x)=0 and delta^D=0
K_x0 = K(X,h)
num <- vector()
for (i in 1:N) {
f_1 <- K_x0[,i] * (Z==1)
f_0 <- K_x0[,i] * (Z==0)
if (sum(f_1)==0 | sum(f_0)==0) {
num = c(num,i)
}
}
ind0 = which(deltaDhat(X,Z,D,h,K_x0)<1e-10)
for (i in 1:N) {
f_1 <- K_x0[,i] * (Z==1)
f_0 <- K_x0[,i] * (Z==0)
if (sum(f_1)==0 | sum(f_0)==0) {
num = c(num,i)
}
}
X <- X[-num,]
Y <- Y[-num]
Z <- Z[-num]
D <- D[-num]
N <- length(D)
rm(list=ls())
load("3.1 NLS.RData")
source("3.2 KernelEstimators.R")
btstrap.each = 500
h <- 1.06* N^{-1/8}
X = X.mat[,c(2:4, 8,9,12, 14, 19,20,22)]
X = data.frame(X)
X$age        = scale(X$age)
X$fatheduc   = scale(X$fatheduc)
X$motheduc   = scale(X$motheduc)
X$iq         = scale(X$iq)
### romove f(z|x)=0
K_x0 = K(X,h)
ind0 <- vector()
for (i in 1:N) {
f_1 <- K_x0[,i] * (Z==1)
f_0 <- K_x0[,i] * (Z==0)
if (sum(f_1)==0 | sum(f_0)==0) {
ind0 = c(ind0,i)
}
}
X <- X[-ind0,]
Y <- Y[-ind0]
Z <- Z[-ind0]
D <- D[-ind0]
N <- length(D)
### remove delta^D=0
ind0 = which(deltaDhat(X,Z,D,h,K_x0)<1e-10)
warnings()
### remove delta^D=0
K_x0 = K(X,h)
ind0 = which(deltaDhat(X,Z,D,h,K_x0)<1e-10)
### remove delta^D=0
h <- 1.06* N^{-1/8}
K_x0 = K(X,h)
quantile(deltaDhat(X,Z,D,h,K_x0),seq(0,1,0.05))
ind0 = which(abs(deltaDhat(X,Z,D,h,K_x0))<1e-10)
ind0 = which(abs(deltaDhat(X,Z,D,h,K_x0))<1e-5)
ind0 = which(abs(deltaDhat(X,Z,D,h,K_x0))<1e-6 )
ind0 = which(abs(deltaDhat(X,Z,D,h,K_x0))<1e-6)
X <- X[-ind0,]
Y <- Y[-ind0]
Z <- Z[-ind0]
D <- D[-ind0]
N <- length(D)
KSE1_est <- KSE_1(X,Y,D,Z,h)
### remove delta^D=0
h <- 1.06* N^{-1/8}
K_x = K(X,h)
sum( (2*Z-1)/fhat(X,Z,h,K_x)*
Y/deltaDhat(X,Z,D,h,K_x) ) /N
which(fhat(X,Z,h,K_x)==0)
fhat(X,Z,h,K_x)
deltaDhat(X,Z,D,h,K_x)
summary(deltaDhat(X,Z,D,h,K_x))
which(is.na(deltaDhat(X,Z,D,h,K_x)))
res = pDhat(0,X,Z,D,h,K_x)
res[1773]
